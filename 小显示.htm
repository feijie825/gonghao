<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\zlz\校验台改造\program\Lm3s2139\小显示.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\zlz\校验台改造\program\Lm3s2139\小显示.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Tue Mar 23 15:41:44 2010
<BR><P>
<H3>Maximum Stack Usage =        260 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MEA_CLK_FREQ &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e71604]">Reset_Handler</a>
 <LI><a href="#[e2e0ec]">CPUcpsid</a>
 <LI><a href="#[e2e0b0]">CPUcpsie</a>
 <LI><a href="#[e278a0]">CPUwfi</a>
 <LI><a href="#[e717a8]">NmiSR</a>
 <LI><a href="#[e7176c]">FaultISR</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e32dcc]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e32dcc]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e71604]">Reset_Handler</a>
 <LI><a href="#[e717a8]">NmiSR</a>
 <LI><a href="#[e7176c]">FaultISR</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71460]">SysTickIntHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71514]">GPIOBHandler</a>
 <LI><a href="#[e714d8]">GPIOCHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e712bc]">UART0IntHandler</a>
 <LI><a href="#[e71280]">UART1IntHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e7158c]">ADC0Handler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71244]">WatchDogHandler</a>
 <LI><a href="#[e71424]">Timer0AIntHandler</a>
 <LI><a href="#[e713e8]">Timer0BIntHandler</a>
 <LI><a href="#[e713ac]">Timer1AIntHandler</a>
 <LI><a href="#[e71370]">Timer1BIntHandler</a>
 <LI><a href="#[e71334]">Timer2AIntHandler</a>
 <LI><a href="#[e712f8]">Timer2BIntHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e7149c]">GPIOFHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71550]">CANHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e71730]">IntDefaultHandler</a>
 <LI><a href="#[e70c68]">main</a>
 <LI><a href="#[149d22c]">_sputc</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e71604]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lm3s21xx_vect.s.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[14a5cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[14a5cb0]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e71604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[19f4a54]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[19f4928]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[19f3c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19f48ec]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[19f3c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19f47fc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[e32dcc]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lm3s21xx_sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e27990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
<LI><a href="#[e70830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HD7279
<LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e333e4]"></a>CANRegRead</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e32f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
<LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
<LI><a href="#[e32fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANErrCntrGet
<LI><a href="#[e32fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[e33024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[e33060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
<LI><a href="#[e33114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_MsgRam
<LI><a href="#[e33150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[e3318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[e331c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[e33240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMsg_Set
<LI><a href="#[e3327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>

<P><STRONG><a name="[e332f4]"></a>CANRegWrite</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e32f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
<LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
<LI><a href="#[e32fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[e3309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
<LI><a href="#[e33114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_MsgRam
<LI><a href="#[e33150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[e3318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[e331c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[e33240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMsg_Set
<LI><a href="#[e3327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>

<P><STRONG><a name="[e332b8]"></a>CANIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e32f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
<LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
<LI><a href="#[e32fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANErrCntrGet
<LI><a href="#[e32fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[e33024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[e33114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_MsgRam
<LI><a href="#[e33150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[e3318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[e331c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[e33240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMsg_Set
<LI><a href="#[e3327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>

<P><STRONG><a name="[e3327c]"></a>CANStatusGet</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANStatusGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
<LI><a href="#[e71550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[e33240]"></a>CAN_RxMsg_Set</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_RxMsg_Set &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e33204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MsgRam
</UL>

<P><STRONG><a name="[e33204]"></a>Set_MsgRam</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Set_MsgRam &rArr; CAN_RxMsg_Set &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e33240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMsg_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
</UL>

<P><STRONG><a name="[e331c8]"></a>CANIntEnable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
</UL>

<P><STRONG><a name="[e3318c]"></a>CANEnable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANEnable &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
</UL>

<P><STRONG><a name="[e33150]"></a>CANBitTimingSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANBitTimingSet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
</UL>

<P><STRONG><a name="[e33114]"></a>Clr_MsgRam</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Clr_MsgRam &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
</UL>

<P><STRONG><a name="[e330d8]"></a>Init_CAN</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Init_CAN &rArr; Set_MsgRam &rArr; CAN_RxMsg_Set &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e33114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_MsgRam
<LI><a href="#[e33150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitTimingSet
<LI><a href="#[e3318c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[e331c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[e33204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MsgRam
<LI><a href="#[e3327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3309c]"></a>CANDataRegWrite</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>

<P><STRONG><a name="[e33060]"></a>CANDataRegRead</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e32f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
</UL>

<P><STRONG><a name="[e33024]"></a>CANIntStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANIntStatus &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e71550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[e32fe8]"></a>CANIntClear</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CANIntClear &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e71550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[e32fac]"></a>CANErrCntrGet</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CANErrCntrGet &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e71550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[e32f70]"></a>CAN_Tx_Msg</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e3309c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
<LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e69d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLV_REQ_TX
<LI><a href="#[e69d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_TX_Pr
<LI><a href="#[e69e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLV_REQ_RETX
<LI><a href="#[e7086c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_OBUF
<LI><a href="#[e708e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Mst_Check
</UL>

<P><STRONG><a name="[e32f34]"></a>CAN_Rx_Msg</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lm3s21xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_Rx_Msg &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e33060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
<LI><a href="#[e332b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
<LI><a href="#[e332f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
<LI><a href="#[e333e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e71550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANHandler
</UL>

<P><STRONG><a name="[e2f280]"></a>GPIOPinWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[e697b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Light_Pr
<LI><a href="#[e69b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELEC_PLS_TYPE_Pr
<LI><a href="#[e69b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELEC_HEAD_RESET_Pr
<LI><a href="#[e69c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_U_In_Pr
<LI><a href="#[e707f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_ESwitch_Time_Pr
<LI><a href="#[e70830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HD7279
<LI><a href="#[e70998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_Rx_OvTm
<LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
<LI><a href="#[e70b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_JDQ_Time_Pr
<LI><a href="#[e70bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_RST_Pr
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
<LI><a href="#[e71460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntHandler
<LI><a href="#[14a790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_POWER_D_MODE_Pr
<LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
</UL>

<P><STRONG><a name="[e2f1cc]"></a>GPIOPinIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2f190]"></a>GPIOIntTypeSet</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2f154]"></a>GPIOPadConfigSet</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[e2efb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[e2efec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[e2f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[e69a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_EN_Pr
<LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2f118]"></a>GPIODirModeSet</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2efb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[e2efec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[e2f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[e69a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_EN_Pr
<LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
</UL>

<P><STRONG><a name="[e2f0dc]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[e2f0a0]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2f064]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2f028]"></a>GPIOPinTypeUART</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[e2efec]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeCAN &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[e2efb0]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIOPinTypeSSI &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
</UL>

<P><STRONG><a name="[e2ef74]"></a>Init_Gpio</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_Gpio &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e2efb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[e2efec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[e2f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f0dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e2f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[e2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2ef38]"></a>GPIOPinIntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7149c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOFHandler
<LI><a href="#[e71514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBHandler
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e2eefc]"></a>GPIOPinRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lm3s21xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
<LI><a href="#[14a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NYSY_MODE_Pr
</UL>

<P><STRONG><a name="[e32ebc]"></a>IntEnable</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Int
</UL>

<P><STRONG><a name="[e2e1dc]"></a>IntPrioritySet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntPrioritySet
</UL>
<BR>[Called By]<UL><LI><a href="#[e2e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Int
</UL>

<P><STRONG><a name="[e2e1a0]"></a>Init_Int</STRONG> (Thumb, 172 bytes, Stack size 4 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Init_Int &rArr; IntPrioritySet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2e1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPrioritySet
<LI><a href="#[e32ebc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2e164]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2e0b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2e128]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2e0ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_INT_DIS
</UL>

<P><STRONG><a name="[e32ef8]"></a>IntDisable</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lm3s21xx_interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_INT_DIS
</UL>

<P><STRONG><a name="[e2b860]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2b680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ssi
</UL>

<P><STRONG><a name="[e2b6bc]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lm3s21xx_ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[e2b680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ssi
</UL>

<P><STRONG><a name="[e2b680]"></a>Init_Ssi</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lm3s21xx_ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Ssi &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[e2b6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[e2b860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2b644]"></a>SSIDataLen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lm3s21xx_ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[e70830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HD7279
</UL>

<P><STRONG><a name="[e2b608]"></a>SSIDataPut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[e70830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HD7279
</UL>

<P><STRONG><a name="[e28098]"></a>SysCtlClockGet</STRONG> (Thumb, 242 bytes, Stack size 20 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e27918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pll
</UL>

<P><STRONG><a name="[e27990]"></a>SysCtlClockSet</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e27918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pll
</UL>

<P><STRONG><a name="[e27954]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e27918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pll
</UL>

<P><STRONG><a name="[e27918]"></a>Init_Pll</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_Pll &rArr; SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e27954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlLDOSet
<LI><a href="#[e27990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[e28098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e32d90]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2b680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ssi
<LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
<LI><a href="#[e69a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_EN_Pr
<LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
<LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
<LI><a href="#[e7338c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart
<LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[e278dc]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lm3s21xx_sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
</UL>

<P><STRONG><a name="[e77694]"></a>SysTickIntEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e774f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>

<P><STRONG><a name="[e77568]"></a>SysTickEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e774f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>

<P><STRONG><a name="[e7752c]"></a>SysTickPeriodSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e774f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>

<P><STRONG><a name="[e774f0]"></a>Init_SysTick</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lm3s21xx_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Init_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e7752c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickPeriodSet
<LI><a href="#[e77568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickEnable
<LI><a href="#[e77694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e75a38]"></a>TimerEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e75768]"></a>TimerIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e7572c]"></a>TimerMatchSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e756f0]"></a>TimerLoadSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e756b4]"></a>TimerControlEvent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e75678]"></a>TimerControlLevel</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[e7563c]"></a>TimerConfigure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[e75600]"></a>Init_Timer</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_Timer &rArr; SysCtlPeripheralEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e7563c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
<LI><a href="#[e75678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlLevel
<LI><a href="#[e756b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[e756f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[e7572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[e75768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[e75a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e755c4]"></a>TimerDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e75588]"></a>TimerIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>

<P><STRONG><a name="[e73698]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>

<P><STRONG><a name="[e734b8]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>

<P><STRONG><a name="[e7347c]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e73404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[e73440]"></a>UARTDisable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e73404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[e73404]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[e73440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisable
<LI><a href="#[e7347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>

<P><STRONG><a name="[e733c8]"></a>Init_Com</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Init_Com &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e73404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
<LI><a href="#[e734b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFIFOLevelSet
<LI><a href="#[e73698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6960c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MTR_LCT_Com
<LI><a href="#[e7338c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart
</UL>

<P><STRONG><a name="[e7338c]"></a>Init_Uart</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Init_Uart &rArr; Init_Com &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e73350]"></a>UARTCharsAvail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[e73314]"></a>UARTCharGet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[e732d8]"></a>UARTCharPut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
<LI><a href="#[e71280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[e7329c]"></a>UARTBusy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
</UL>

<P><STRONG><a name="[e73260]"></a>UARTIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
</UL>

<P><STRONG><a name="[e73224]"></a>UARTIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[e731e8]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lm3s21xx_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IntHandler
<LI><a href="#[e712bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IntHandler
</UL>

<P><STRONG><a name="[e71e38]"></a>WatchdogEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71ba4]"></a>WatchdogStallEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71b68]"></a>WatchdogResetEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71b2c]"></a>WatchdogReloadSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTFeed
<LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71af0]"></a>WatchdogIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchDogHandler
<LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71ab4]"></a>WatchdogUnlock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
</UL>

<P><STRONG><a name="[e71a78]"></a>Init_Wdt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_Wdt &rArr; SysCtlPeripheralEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e71ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogUnlock
<LI><a href="#[e71af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntClear
<LI><a href="#[e71b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
<LI><a href="#[e71b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogResetEnable
<LI><a href="#[e71ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogStallEnable
<LI><a href="#[e71e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e71a3c]"></a>WatchdogReloadGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e71a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTFeed
</UL>

<P><STRONG><a name="[e71a00]"></a>WDTFeed</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lm3s21xx_watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDTFeed
</UL>
<BR>[Calls]<UL><LI><a href="#[e71a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadGet
<LI><a href="#[e71b2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogReloadSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2e0ec]"></a>CPUcpsid</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2e128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[e2e0b0]"></a>CPUcpsie</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2e164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[e278a0]"></a>CPUwfi</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_keil.o(.text), UNUSED)
<BR><BR>[Called By]<UL></UL>

<P><STRONG><a name="[e70c68]"></a>main</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = main &rArr; MEA_CLK_FREQ &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e27918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Pll
<LI><a href="#[e2b680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ssi
<LI><a href="#[e2e128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[e2e164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[e2e1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Int
<LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[e330d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_CAN
<LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
<LI><a href="#[e707f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_ESwitch_Time_Pr
<LI><a href="#[e70830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_HD7279
<LI><a href="#[e7086c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_OBUF
<LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
<LI><a href="#[e708e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Mst_Check
<LI><a href="#[e70920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_MFuction_PLS
<LI><a href="#[e7095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_LDATA_MSG_IBUF
<LI><a href="#[e70998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_Rx_OvTm
<LI><a href="#[e709d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_OBuf
<LI><a href="#[e70a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_IBuf
<LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_CAN_REQ_OvTm
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[e70b78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_JDQ_Time_Pr
<LI><a href="#[e70bb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_RST_Pr
<LI><a href="#[e70bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time_Pr
<LI><a href="#[e70c2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Std_Clk
<LI><a href="#[e71a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTFeed
<LI><a href="#[e71a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Wdt
<LI><a href="#[e7338c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Uart
<LI><a href="#[e75600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[e774f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[e71244]"></a>WatchDogHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e71af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WatchdogIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71460]"></a>SysTickIntHandler</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e7158c]"></a>ADC0Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e712bc]"></a>UART0IntHandler</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e731e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[e73224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[e732d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[e73314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[e73350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71280]"></a>UART1IntHandler</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1IntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e731e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntClear
<LI><a href="#[e73224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntStatus
<LI><a href="#[e732d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[e73314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharGet
<LI><a href="#[e73350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharsAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71424]"></a>Timer0AIntHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer0AIntHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e713e8]"></a>Timer0BIntHandler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e713ac]"></a>Timer1AIntHandler</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Timer1AIntHandler &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71370]"></a>Timer1BIntHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71334]"></a>Timer2AIntHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e712f8]"></a>Timer2BIntHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71514]"></a>GPIOBHandler</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = GPIOBHandler &rArr; Proc_Xul_Pls &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2ef38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[e6f4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Xul_Pls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e714d8]"></a>GPIOCHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e7149c]"></a>GPIOFHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = GPIOFHandler &rArr; Proc_Xul_Pls &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2ef38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[e6f4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Xul_Pls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71550]"></a>CANHandler</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CANHandler &rArr; CAN_Rx_Msg &rArr; CANDataRegRead &rArr; CANRegRead
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Rx_Msg
<LI><a href="#[e32fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANErrCntrGet
<LI><a href="#[e32fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[e33024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[e3327c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e70830]"></a>Reset_HD7279</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reset_HD7279
</UL>
<BR>[Calls]<UL><LI><a href="#[e2b608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[e2b644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataLen
<LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6ae6c]"></a>Disp_Data</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e2b608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataPut
<LI><a href="#[e2b644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDataLen
</UL>
<BR>[Called By]<UL><LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
<LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e6ad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Long_Data
<LI><a href="#[e70bf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Time_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[e6ae30]"></a>Update_N_Buf</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[e6adf4]"></a>Update_Mtr_Num</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[e6adb8]"></a>Copy_Str_To_DSBUF</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Copy_Str_To_DSBUF
</UL>
<BR>[Called By]<UL><LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>

<P><STRONG><a name="[e6ad7c]"></a>Disp_Long_Data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Disp_Long_Data &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_READY_MODE_Pr
</UL>

<P><STRONG><a name="[e70bf0]"></a>Disp_Time_Pr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Disp_Time_Pr &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6a8cc]"></a>Read_Mtr_Numb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_Mtr_Numb &rArr; SysCtlPeripheralDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e278dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralDisable
<LI><a href="#[e2eefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[e32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
</UL>

<P><STRONG><a name="[e70b3c]"></a>Init_Ram</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Init_Ram &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6a890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Gp_Relaod
<LI><a href="#[e6a8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Mtr_Numb
<LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69e04]"></a>SLV_REQ_RETX</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SLV_REQ_RETX &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e69dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_RX_Pr
</UL>

<P><STRONG><a name="[e69dc8]"></a>CAN_LDATA_RX_Pr</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN_LDATA_RX_Pr &rArr; SLV_REQ_RETX &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e69e04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLV_REQ_RETX
<LI><a href="#[14a59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7095c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_LDATA_MSG_IBUF
</UL>

<P><STRONG><a name="[e7095c]"></a>Proc_LDATA_MSG_IBUF</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Proc_LDATA_MSG_IBUF &rArr; CAN_LDATA_RX_Pr &rArr; SLV_REQ_RETX &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e69dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_RX_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69d8c]"></a>CAN_LDATA_TX_Pr</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN_LDATA_TX_Pr &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
<LI><a href="#[14a59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e70a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_IBuf
</UL>

<P><STRONG><a name="[e70a88]"></a>Proc_CAN_REQ_OvTm</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69d50]"></a>SLV_REQ_TX</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SLV_REQ_TX &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e70a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_IBuf
</UL>

<P><STRONG><a name="[e708e4]"></a>Proc_Mst_Check</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Proc_Mst_Check &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e708a8]"></a>Proc_SDATA_IBUF</STRONG> (Thumb, 644 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Proc_SDATA_IBUF &rArr; Set_Clk_Freq_Pr &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e69030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIRE_TYPE_Pr
<LI><a href="#[e6906c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_Start_Pr
<LI><a href="#[e690a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Sy_Pr
<LI><a href="#[e690e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Stop_Pr
<LI><a href="#[e69120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Ny_Pr
<LI><a href="#[e6915c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_PLS_Pr
<LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e691d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_XuL_Pls_Num
<LI><a href="#[e69210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_XuL_Ctl_Pr
<LI><a href="#[e6924c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_WhVar
<LI><a href="#[e69288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Time_Base
<LI><a href="#[e692c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sy_Ph
<LI><a href="#[e69300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sy
<LI><a href="#[e6933c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STD_CST_Pr
<LI><a href="#[e69378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reload_MtrD
<LI><a href="#[e693b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Reload_LctD
<LI><a href="#[e693f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReTx_MtrD
<LI><a href="#[e6942c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ReTx_LctD
<LI><a href="#[e69468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pzzs_Pr
<LI><a href="#[e694a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pzbz_Pr
<LI><a href="#[e694e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Phase
<LI><a href="#[e6951c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PLSHC
<LI><a href="#[e69558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_N_Pr
<LI><a href="#[e69594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mtr_Cst_Pr
<LI><a href="#[e695d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Min_CST_Pr
<LI><a href="#[e6960c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MTR_LCT_Com
<LI><a href="#[e69648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MFCLK_Type
<LI><a href="#[e69684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MFCLK_Mode
<LI><a href="#[e696c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Disp_Mode
<LI><a href="#[e696fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Time_Pr
<LI><a href="#[e69738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Freq_Pr
<LI><a href="#[e69774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Ctl_Pr
<LI><a href="#[e697b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STS_Light_Pr
<LI><a href="#[e697ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSet_ZZ_PLS_Pr
<LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PZ_ERR_Pr
<LI><a href="#[e698a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLS_ZZ_Pr
<LI><a href="#[e698dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLS_SEL_Pr
<LI><a href="#[e69918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ny_Time_End_Pr
<LI><a href="#[e69954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_Pr
<LI><a href="#[e69990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_PLS_CYCLE_Pr
<LI><a href="#[e699cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_MTR_CST_Pr
<LI><a href="#[e69a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Verify_Sts
<LI><a href="#[e69a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Sy_Sts
<LI><a href="#[e69a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JTAG_EN_Pr
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
<LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e69b34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELEC_PLS_TYPE_Pr
<LI><a href="#[e69b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELEC_HEAD_RESET_Pr
<LI><a href="#[e69bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIVIDE_COEF_Pr
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[e69c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chg_U_In_Pr
<LI><a href="#[e69c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CYCLE_PLS_SEL_Pr
<LI><a href="#[e69c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_Pr
<LI><a href="#[e69cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_EN_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69d14]"></a>SDATA_MSG_OHead_ADD_ONE</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>

<P><STRONG><a name="[e7086c]"></a>Proc_SDATA_OBUF</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Proc_SDATA_OBUF &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e32f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Tx_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a943c]"></a>BOOT_INT_DIS</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BOOT_INT_DIS &rArr; IntMasterDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2e128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
<LI><a href="#[e32ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_IBuf
</UL>

<P><STRONG><a name="[e70a10]"></a>Proc_Com_IBuf</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Proc_Com_IBuf &rArr; SLV_REQ_TX &rArr; CAN_Tx_Msg &rArr; CANDataRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e69d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLV_REQ_TX
<LI><a href="#[e69d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_TX_Pr
<LI><a href="#[14a59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14a943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOOT_INT_DIS
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e709d4]"></a>Proc_Com_OBuf</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Proc_Com_OBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e73260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntDisable
<LI><a href="#[e7329c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTBusy
<LI><a href="#[e732d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTCharPut
<LI><a href="#[e73698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e70998]"></a>Proc_Com_Rx_OvTm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Proc_Com_Rx_OvTm
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6fd68]"></a>Cal_Clk_Reload</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e755c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[e756f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[e75a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
<LI><a href="#[14a87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a8884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a8974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e696fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Time_Pr
<LI><a href="#[e69738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Freq_Pr
<LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[e713ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1AIntHandler
</UL>

<P><STRONG><a name="[e6960c]"></a>Set_MTR_LCT_Com</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Set_MTR_LCT_Com &rArr; Init_Com &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69738]"></a>Set_Clk_Freq_Pr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Set_Clk_Freq_Pr &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e696fc]"></a>Set_Clk_Time_Pr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Set_Clk_Time_Pr &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69774]"></a>Set_Clk_Ctl_Pr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69210]"></a>Set_XuL_Ctl_Pr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e691d4]"></a>Set_XuL_Pls_Num</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e696c0]"></a>Set_Disp_Mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69378]"></a>Set_Reload_MtrD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e693b4]"></a>Set_Reload_LctD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e693f0]"></a>Set_ReTx_MtrD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e6942c]"></a>Set_ReTx_LctD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69288]"></a>Set_Time_Base</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e70c2c]"></a>Check_Std_Clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a8c80]"></a>Act_Freq_to_Set</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Act_Freq_to_Set &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a8974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14a89ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a8a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[e70a4c]"></a>Proc_Clk_OvTm</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Proc_Clk_OvTm &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[14a87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a8a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e70b00]"></a>MEA_CLK_FREQ</STRONG> (Thumb, 972 bytes, Stack size 56 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MEA_CLK_FREQ &rArr; Cal_Clk_Reload &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[14a57c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a88c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a89ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[14a8a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14a8a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e70ac4]"></a>MEA_XUL_TIME</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MEA_XUL_TIME &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a57c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a8a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e70920]"></a>Proc_MFuction_PLS</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Proc_MFuction_PLS &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[14a5620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6f4f8]"></a>Proc_Xul_Pls</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, clk_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Proc_Xul_Pls &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e7149c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOFHandler
<LI><a href="#[e71514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOBHandler
</UL>

<P><STRONG><a name="[14a8adc]"></a>Send_Data</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e69d14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDATA_MSG_OHead_ADD_ONE
</UL>
<BR>[Called By]<UL><LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[e70920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_MFuction_PLS
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[14a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NYSY_MODE_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_READY_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[e70b78]"></a>I_JDQ_Time_Pr</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_JDQ_Time_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e707f4]"></a>UJDQ_ESwitch_Time_Pr</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UJDQ_ESwitch_Time_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a7e70]"></a>I_In_Out_Pr</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_In_Out_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e69c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
</UL>

<P><STRONG><a name="[14a7e34]"></a>UJDQ_Control_Pr</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UJDQ_Control_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a7d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Close
<LI><a href="#[14a7d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Close
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
</UL>

<P><STRONG><a name="[14a7df8]"></a>ESwitch_Control_Pr</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a7d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Close
<LI><a href="#[14a7d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Close
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
</UL>

<P><STRONG><a name="[14a7dbc]"></a>UJDQ_Close_ESwitch_Open</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a7e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Control_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e69a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Sy_Sts
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_READY_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
</UL>

<P><STRONG><a name="[e2eec0]"></a>Uin_Iin_Pr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e2ef74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Gpio
<LI><a href="#[e690e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Stop_Pr
<LI><a href="#[e69864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PZ_ERR_Pr
<LI><a href="#[e698a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLS_ZZ_Pr
<LI><a href="#[e69a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Verify_Sts
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>

<P><STRONG><a name="[14a7d80]"></a>UJDQ_Close_ESwitch_Close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UJDQ_Close_ESwitch_Close &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a7e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Control_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e69c9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_Pr
</UL>

<P><STRONG><a name="[14a7d44]"></a>UJDQ_Open_ESwitch_Close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UJDQ_Open_ESwitch_Close &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a7e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Control_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e69a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Login_Sy_Sts
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
</UL>

<P><STRONG><a name="[14a7d08]"></a>UJDQ_Open_ESwitch_Open</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UJDQ_Open_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a7e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Control_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
</UL>

<P><STRONG><a name="[14a7ccc]"></a>ELSC_PLS_IN_DEN</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ELSC_PLS_IN_DEN &rArr; GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e75588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntDisable
<LI><a href="#[e755c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[e756b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[e756f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[e7572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[e75768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[e75a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
</UL>

<P><STRONG><a name="[14a7c90]"></a>GDT_PLS_IN_DEN</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2ef38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e2f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[e2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
</UL>

<P><STRONG><a name="[14a7c54]"></a>ENG_PLS_IN_Pr</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2ef38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e2f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[e2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[14a7c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDT_PLS_IN_DEN
<LI><a href="#[14a7ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELSC_PLS_IN_DEN
</UL>
<BR>[Called By]<UL><LI><a href="#[e698dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLS_SEL_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_READY_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[14a7c18]"></a>CLK_XUL_PLS_IN_Pr</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_XUL_PLS_IN_Pr &rArr; GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e2f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOIntTypeSet
<LI><a href="#[e2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[e756b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerControlEvent
<LI><a href="#[e756f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[e7572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[e75768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[e75a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[14a7bdc]"></a>ReStart_Mea_Err</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReStart_Mea_Err &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>

<P><STRONG><a name="[e6a890]"></a>Cal_Gp_Relaod</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cal_Gp_Relaod
</UL>
<BR>[Called By]<UL><LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
</UL>

<P><STRONG><a name="[e6a854]"></a>Cal_STD_ENG_CNT_VAL</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cal_STD_ENG_CNT_VAL &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a8974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e69558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_N_Pr
<LI><a href="#[e69594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mtr_Cst_Pr
<LI><a href="#[e695d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Min_CST_Pr
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
</UL>

<P><STRONG><a name="[e6933c]"></a>Set_STD_CST_Pr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_STD_CST_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69558]"></a>Set_N_Pr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Set_N_Pr &rArr; Cal_STD_ENG_CNT_VAL &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69abc]"></a>ERR_CLR_Pr</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ERR_CLR_Pr &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e69b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ELEC_HEAD_RESET_Pr
<LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e70bb4]"></a>GDT_RST_Pr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69b70]"></a>ELEC_HEAD_RESET_Pr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ELEC_HEAD_RESET_Pr &rArr; ERR_CLR_Pr &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69954]"></a>MTR_PLUG_Pr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MTR_PLUG_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69c9c]"></a>CATCH_HB_Pr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CATCH_HB_Pr &rArr; UJDQ_Close_ESwitch_Close &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Close
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e690e4]"></a>Start_Stop_Pr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Start_Stop_Pr &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e6951c]"></a>Set_PLSHC</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69cd8]"></a>BEEP_EN_Pr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69a08]"></a>Login_Verify_Sts</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Login_Verify_Sts &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e6906c]"></a>Verify_Start_Pr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69594]"></a>Set_Mtr_Cst_Pr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Set_Mtr_Cst_Pr &rArr; Cal_STD_ENG_CNT_VAL &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e698dc]"></a>PLS_SEL_Pr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PLS_SEL_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69be8]"></a>Cnt_ENG_Pr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cnt_ENG_Pr &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69af8]"></a>ENG_CLR_Pr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENG_CLR_Pr &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69864]"></a>PZ_ERR_Pr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PZ_ERR_Pr &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e694a4]"></a>Set_Pzbz_Pr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69468]"></a>Set_Pzzs_Pr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69a44]"></a>Login_Sy_Sts</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Login_Sy_Sts &rArr; UJDQ_Open_ESwitch_Close &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Close
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e690a8]"></a>Start_Sy_Pr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69c60]"></a>CYCLE_PLS_SEL_Pr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69bac]"></a>DIVIDE_COEF_Pr</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e699cc]"></a>MEA_MTR_CST_Pr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69828]"></a>Power_Test_Pr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Power_Test_Pr &rArr; UJDQ_Open_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69990]"></a>MEA_PLS_CYCLE_Pr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69030]"></a>WIRE_TYPE_Pr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69b34]"></a>ELEC_PLS_TYPE_Pr</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ELEC_PLS_TYPE_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e6915c]"></a>Set_ZZ_PLS_Pr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e698a0]"></a>PLS_ZZ_Pr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PLS_ZZ_Pr &rArr; Uin_Iin_Pr &rArr; UJDQ_Close_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e697ec]"></a>ReSet_ZZ_PLS_Pr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69120]"></a>Start_Ny_Pr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69918]"></a>Ny_Time_End_Pr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69c24]"></a>Chg_U_In_Pr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e697b0]"></a>STS_Light_Pr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e692c4]"></a>Set_Sy_Ph</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e695d0]"></a>Set_Min_CST_Pr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Set_Min_CST_Pr &rArr; Cal_STD_ENG_CNT_VAL &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69198]"></a>Set_ZZ_Ds</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Set_ZZ_Ds &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a57c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a8974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e694e0]"></a>Set_Phase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Phase
</UL>
<BR>[Calls]<UL><LI><a href="#[14a89b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e6924c]"></a>Set_WhVar</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69300]"></a>Set_Sy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[14a7ba0]"></a>MFuction_Clk_Cfg</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MFuction_Clk_Cfg &rArr; GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2ef38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntDisable
<LI><a href="#[e2f064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[e2f0a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[e2f1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinIntEnable
<LI><a href="#[e755c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDisable
<LI><a href="#[e756f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLoadSet
<LI><a href="#[e7572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerMatchSet
<LI><a href="#[e75768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIntEnable
<LI><a href="#[e75a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e69648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MFCLK_Type
<LI><a href="#[e69684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MFCLK_Mode
</UL>

<P><STRONG><a name="[e69684]"></a>Set_MFCLK_Mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Set_MFCLK_Mode &rArr; MFuction_Clk_Cfg &rArr; GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[e69648]"></a>Set_MFCLK_Type</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Set_MFCLK_Type &rArr; MFuction_Clk_Cfg &rArr; GPIOPinTypeTimer &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MFuction_Clk_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[14a7b64]"></a>ENG_ERR_MODE_Pr</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ENG_ERR_MODE_Pr &rArr; ReStart_Mea_Err &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
<LI><a href="#[14a8848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7b28]"></a>MTR_PLUG_MODE_Pr</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MTR_PLUG_MODE_Pr &rArr; UJDQ_Open_ESwitch_Open &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7aec]"></a>CATCH_HB_MODE_Pr</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CATCH_HB_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7ab0]"></a>START_STOP_MODE_Pr</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = START_STOP_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7a74]"></a>VERIFY_READY_MODE_Pr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VERIFY_READY_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6ad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Long_Data
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7a38]"></a>VERIFY_START_MODE_Pr</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VERIFY_START_MODE_Pr &rArr; Disp_Long_Data &rArr; Disp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e6ad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Long_Data
<LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a79fc]"></a>VOLTAGE_DOWN_MODE_Pr</STRONG> (Thumb, 582 bytes, Stack size 40 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VOLTAGE_DOWN_MODE_Pr &rArr; UJDQ_Open_ESwitch_Close &rArr; ESwitch_Control_Pr
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Close
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a7df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESwitch_Control_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a79c0]"></a>MEASURE_ENG_MODE_Pr</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MEASURE_ENG_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e73080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a7c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XUL_PLS_IN_Pr
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7984]"></a>PANZHUAN_ERR_MODE_Pr</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PANZHUAN_ERR_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7948]"></a>MEA_CST_MODE_Pr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MEA_CST_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Close_ESwitch_Open
<LI><a href="#[14a7e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_In_Out_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a790c]"></a>MEA_POWER_D_MODE_Pr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e2f280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a78d0]"></a>MEA_ENG_DUTY_MODE_Pr</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MEA_ENG_DUTY_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a59e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7894]"></a>PULSE_ZZ_MODE_Pr</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PULSE_ZZ_MODE_Pr &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uin_Iin_Pr
<LI><a href="#[e6adb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Str_To_DSBUF
<LI><a href="#[e6adf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Mtr_Num
<LI><a href="#[e6ae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_N_Buf
<LI><a href="#[e6ae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Data
<LI><a href="#[149cdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[14a7c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_PLS_IN_Pr
<LI><a href="#[14a7d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UJDQ_Open_ESwitch_Open
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[14a7858]"></a>NYSY_MODE_Pr</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NYSY_MODE_Pr &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e2eefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[14a8adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e707b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_Mode_Pr
</UL>

<P><STRONG><a name="[e707b8]"></a>Work_Mode_Pr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, eng_err.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Work_Mode_Pr &rArr; ENG_ERR_MODE_Pr &rArr; ReStart_Mea_Err &rArr; ENG_PLS_IN_Pr &rArr; GDT_PLS_IN_DEN &rArr; GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[14a7858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NYSY_MODE_Pr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_POWER_D_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_READY_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>
<BR>[Called By]<UL><LI><a href="#[e70c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e69a80]"></a>JTAG_EN_Pr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, 加密.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JTAG_EN_Pr &rArr; SysCtlPeripheralEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[e2f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
<LI><a href="#[e2f154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[e32d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e708a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_SDATA_IBUF
</UL>

<P><STRONG><a name="[14a59e0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69d8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_TX_Pr
<LI><a href="#[e69dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LDATA_RX_Pr
<LI><a href="#[e70a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Com_IBuf
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
</UL>

<P><STRONG><a name="[14a59a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14a5968]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14a5878]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Test_Pr
<LI><a href="#[e69abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_CLR_Pr
<LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[14a5710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[14a57c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a7984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PANZHUAN_ERR_MODE_Pr
<LI><a href="#[14a79fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VOLTAGE_DOWN_MODE_Pr
<LI><a href="#[14a7a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VERIFY_START_MODE_Pr
<LI><a href="#[14a7ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;START_STOP_MODE_Pr
<LI><a href="#[14a7aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CATCH_HB_MODE_Pr
<LI><a href="#[14a7b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTR_PLUG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a7bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReStart_Mea_Err
</UL>

<P><STRONG><a name="[14a583c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14a5800]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14a57c4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[14a5788]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14a574c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14a5710]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a5878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14a5620]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_MFuction_PLS
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[14a8884]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[149bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[149bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[149bd50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[14a73a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[149bd50]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a8884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[14a73a8]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[14a8884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>

<P><STRONG><a name="[14a8848]"></a>__aeabi_fmul</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[e73008]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[149bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[e730bc]"></a>__aeabi_dadd</STRONG> (Thumb, 338 bytes, Stack size 72 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149b990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19f407c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[19f42d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6f4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Xul_Pls
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
<LI><a href="#[149ba80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14a88c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a88c0]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[149ba80]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14a88fc]"></a>__aeabi_dmul</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a8938]"></a>__aeabi_ddiv</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149b990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[e72fcc]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[149bd14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a87d0]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e6f4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Xul_Pls
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[e73044]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
</UL>

<P><STRONG><a name="[14a8974]"></a>__aeabi_d2uiz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f41a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[e73080]"></a>__aeabi_f2d</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[e6a854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_STD_ENG_CNT_VAL
<LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a8a64]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
</UL>

<P><STRONG><a name="[14a8a28]"></a>__aeabi_cdcmple</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proc_Clk_OvTm
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a89ec]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[e730f8]"></a>__aeabi_d2f</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[149bcd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e6fd68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_Clk_Reload
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[e733c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Com
<LI><a href="#[14a8c80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Act_Freq_to_Set
</UL>

<P><STRONG><a name="[14a89b0]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e6933c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_STD_CST_Pr
<LI><a href="#[e694e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Phase
<LI><a href="#[e69594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Mtr_Cst_Pr
<LI><a href="#[e695d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Min_CST_Pr
<LI><a href="#[e69738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Clk_Freq_Pr
</UL>

<P><STRONG><a name="[149b15c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[19f44f0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[19f44b4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19f43c4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f41a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[19f42d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19f42d4]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[149c854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[19f43c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19f4298]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[19f41a8]"></a>__aeabi_llsr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[149c854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14a8974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[19f43c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19f416c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[19f407c]"></a>__aeabi_lasr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19f4040]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[19f3f8c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[149bcd8]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e73008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e730f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[14a8884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[149bd14]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e72fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[14a8884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[149b990]"></a>_double_round</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149b9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[149b9cc]"></a>_double_epilogue</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[149b990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[19f41a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[19f42d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a87d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[149c854]"></a>__aeabi_d2ulz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f41a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[19f42d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19f3c80]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f48ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[19f4928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19f3c44]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[19f3668]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[19f362c]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[149ce6c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149d22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[149ce30]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[149cdf4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e69198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_ZZ_Ds
<LI><a href="#[e69af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_CLR_Pr
<LI><a href="#[e69be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_ENG_Pr
<LI><a href="#[e70ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_XUL_TIME
<LI><a href="#[e70b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CLK_FREQ
<LI><a href="#[e70b3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ram
<LI><a href="#[14a7894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PULSE_ZZ_MODE_Pr
<LI><a href="#[14a78d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_ENG_DUTY_MODE_Pr
<LI><a href="#[14a7948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEA_CST_MODE_Pr
<LI><a href="#[14a79c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEASURE_ENG_MODE_Pr
<LI><a href="#[14a7b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENG_ERR_MODE_Pr
</UL>

<P><STRONG><a name="[149cdb8]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[149cd7c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19f37d0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[19f3794]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[19f3758]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e717a8]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lm3s21xx_vect.s.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e7176c]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lm3s21xx_vect.s.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[e71730]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, lm3s21xx_vect.s.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lm3s21xx_vect.s.o(RESET)
</UL>
<P><STRONG><a name="[149d358]"></a>_fp_digits</STRONG> (Thumb, 378 bytes, Stack size 72 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e730bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[149c854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[14a88fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14a8938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14a89ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[19f43c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[149d31c]"></a>_printf_core</STRONG> (Thumb, 1810 bytes, Stack size 152 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149d2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[149d2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[149d358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[19f43c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19f44b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149ce6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[149d2e0]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[149d2a4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149d31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[149d22c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[149ce6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
