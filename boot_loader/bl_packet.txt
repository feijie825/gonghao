; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -obl_packet.o --depend=bl_packet.d --feedback=bootloader.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Luminary -D__MICROLIB --omf_browse=bl_packet.crf bl_packet.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CheckSum PROC
;;;74     unsigned long
;;;75     CheckSum(const unsigned char *pucData, unsigned long ulSize)
000000  2200              MOVS     r2,#0
;;;76     {
;;;77         unsigned long ulCheckSum;
;;;78     
;;;79         //
;;;80         // Initialize the checksum to zero.
;;;81         //
;;;82         ulCheckSum = 0;
;;;83     
;;;84         //
;;;85         // Add up all the bytes, do not do anything for an overflow.
;;;86         //
;;;87         while(ulSize--)
000002  e002              B        |L1.10|
                  |L1.4|
;;;88         {
;;;89             ulCheckSum += *pucData++;
000004  f8103b01          LDRB     r3,[r0],#1
000008  441a              ADD      r2,r2,r3
                  |L1.10|
00000a  1e49              SUBS     r1,r1,#1              ;87
00000c  d2fa              BCS      |L1.4|
;;;90         }
;;;91     
;;;92         //
;;;93         // Return the caculated check sum.
;;;94         //
;;;95         return(ulCheckSum & 0xff);
00000e  b2d0              UXTB     r0,r2
;;;96     }
000010  4770              BX       lr
;;;97     
                          ENDP

                  AckPacket PROC
;;;110    void
;;;111    AckPacket(void)
000012  2102              MOVS     r1,#2
;;;112    {
;;;113        //
;;;114        // ACK/NAK packets are the only ones with no size.
;;;115        //
;;;116        SendData(g_pucACK, 2);
000014  4835              LDR      r0,|L1.236|
000016  f7ffbffe          B.W      UARTSend
;;;117    }
;;;118    
                          ENDP

                  NakPacket PROC
;;;131    void
;;;132    NakPacket(void)
00001a  4834              LDR      r0,|L1.236|
;;;133    {
;;;134        //
;;;135        // ACK/NAK packets are the only ones with no size.
;;;136        //
;;;137        SendData(g_pucNAK, 2);
00001c  2102              MOVS     r1,#2
00001e  1c80              ADDS     r0,r0,#2
000020  f7ffbffe          B.W      UARTSend
;;;138    }
;;;139    
                          ENDP

                  ReceivePacket PROC
;;;157    int
;;;158    ReceivePacket(unsigned char *pucData, unsigned long *pulSize)
000024  b57c              PUSH     {r2-r6,lr}
;;;159    {
000026  4604              MOV      r4,r0
000028  460d              MOV      r5,r1
;;;160        unsigned long ulSize, ulCheckSum;
;;;161    
;;;162        ulSize = 0;
00002a  2000              MOVS     r0,#0
00002c  9001              STR      r0,[sp,#4]
;;;163        while((ulSize == 0)||(ulSize == 0xCC))          //    
00002e  e003              B        |L1.56|
                  |L1.48|
;;;164         ReceiveData((unsigned char *)&ulSize, 1);	    //数据长度字节
000030  2101              MOVS     r1,#1
000032  a801              ADD      r0,sp,#4
000034  f7fffffe          BL       UARTReceive
                  |L1.56|
000038  9801              LDR      r0,[sp,#4]            ;163
00003a  2800              CMP      r0,#0                 ;163
00003c  d0f8              BEQ      |L1.48|
00003e  28cc              CMP      r0,#0xcc              ;163
000040  d0f6              BEQ      |L1.48|
;;;165        ulSize -= 2;								    //减去长度和校验和 实际数据长度
000042  9801              LDR      r0,[sp,#4]
000044  1e80              SUBS     r0,r0,#2
000046  9001              STR      r0,[sp,#4]
;;;166        ReceiveData((unsigned char *)&ulCheckSum, 1);   //接收校验和字节
000048  2101              MOVS     r1,#1
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       UARTReceive
;;;167        if(*pulSize >= ulSize)							//比较校验和和实际校验和
000050  6828              LDR      r0,[r5,#0]
000052  9901              LDR      r1,[sp,#4]
;;;168         {
;;;169          ReceiveData(pucData, ulSize);					//接收数据
;;;170          if(CheckSum(pucData, ulSize) != (ulCheckSum & 0xff))
;;;171           {											//比较校验和
;;;172            NakPacket();
;;;173            return(-1);
000054  f04f36ff          MOV      r6,#0xffffffff
000058  4288              CMP      r0,r1                 ;167
00005a  d312              BCC      |L1.130|
00005c  4620              MOV      r0,r4                 ;169
00005e  f7fffffe          BL       UARTReceive
000062  4620              MOV      r0,r4                 ;170
000064  9901              LDR      r1,[sp,#4]            ;170
000066  f7fffffe          BL       CheckSum
00006a  9900              LDR      r1,[sp,#0]            ;170
00006c  b2c9              UXTB     r1,r1                 ;170
00006e  4288              CMP      r0,r1                 ;170
000070  d00d              BEQ      |L1.142|
000072  f7fffffe          BL       NakPacket
000076  4630              MOV      r0,r6
;;;174           }
;;;175         }
;;;176        else
;;;177         {
;;;178            while(ulSize--)
;;;179             ReceiveData(pucData, 1);
;;;180            return(-1);
;;;181         }
;;;182        *pulSize = ulSize;
;;;183        return(0);
;;;184    }
000078  bd7c              POP      {r2-r6,pc}
                  |L1.122|
00007a  2101              MOVS     r1,#1                 ;179
00007c  4620              MOV      r0,r4                 ;179
00007e  f7fffffe          BL       UARTReceive
                  |L1.130|
000082  9801              LDR      r0,[sp,#4]            ;178
000084  1e40              SUBS     r0,r0,#1              ;178
000086  9001              STR      r0,[sp,#4]            ;178
000088  d2f7              BCS      |L1.122|
00008a  4630              MOV      r0,r6                 ;180
00008c  bd7c              POP      {r2-r6,pc}
                  |L1.142|
00008e  9801              LDR      r0,[sp,#4]            ;182
000090  6028              STR      r0,[r5,#0]            ;182
000092  2000              MOVS     r0,#0                 ;183
000094  bd7c              POP      {r2-r6,pc}
;;;185    
                          ENDP

                  SendPacket PROC
;;;204    int
;;;205    SendPacket(unsigned char *pucData, unsigned long ulSize)
000096  b513              PUSH     {r0,r1,r4,lr}
;;;206    {
000098  b082              SUB      sp,sp,#8
00009a  4604              MOV      r4,r0
;;;207        unsigned long ulTemp;
;;;208    
;;;209        //
;;;210        // Caculate the checksum to be sent out with the data.
;;;211        //
;;;212        ulTemp = CheckSum(pucData, ulSize);
00009c  4620              MOV      r0,r4
00009e  9903              LDR      r1,[sp,#0xc]
0000a0  f7fffffe          BL       CheckSum
0000a4  9001              STR      r0,[sp,#4]
;;;213    
;;;214        //
;;;215        // Need to include the size and checksum bytes in the packet.
;;;216        //
;;;217        ulSize += 2;
0000a6  9803              LDR      r0,[sp,#0xc]
0000a8  1c80              ADDS     r0,r0,#2
0000aa  9003              STR      r0,[sp,#0xc]
;;;218    
;;;219        //
;;;220        // Send out the size followed by the data.
;;;221        //
;;;222        SendData((unsigned char *)&ulSize, 1);
0000ac  2101              MOVS     r1,#1
0000ae  a803              ADD      r0,sp,#0xc
0000b0  f7fffffe          BL       UARTSend
;;;223        SendData((unsigned char *)&ulTemp, 1);
0000b4  2101              MOVS     r1,#1
0000b6  a801              ADD      r0,sp,#4
0000b8  f7fffffe          BL       UARTSend
;;;224        SendData(pucData, ulSize - 2);
0000bc  9903              LDR      r1,[sp,#0xc]
0000be  4620              MOV      r0,r4
0000c0  1e89              SUBS     r1,r1,#2
0000c2  f7fffffe          BL       UARTSend
;;;225    
;;;226        //
;;;227        // Wait for a non zero byte.
;;;228        //
;;;229        ulTemp = 0;
0000c6  2000              MOVS     r0,#0
0000c8  9001              STR      r0,[sp,#4]
                  |L1.202|
;;;230        while(ulTemp == 0)
;;;231        {
;;;232            ReceiveData((unsigned char *)&ulTemp, 1);	 //等待响应
0000ca  2101              MOVS     r1,#1
0000cc  a801              ADD      r0,sp,#4
0000ce  f7fffffe          BL       UARTReceive
0000d2  9801              LDR      r0,[sp,#4]            ;230
0000d4  2800              CMP      r0,#0                 ;230
0000d6  d0f8              BEQ      |L1.202|
;;;233        }
;;;234    
;;;235        //
;;;236        // Check if the byte was a valid ACK and return a negative value if it was
;;;237        // not and aknowledge.
;;;238        //
;;;239        if(ulTemp != COMMAND_ACK)
0000d8  9801              LDR      r0,[sp,#4]
0000da  28cc              CMP      r0,#0xcc
0000dc  d003              BEQ      |L1.230|
;;;240        {
;;;241            return(-1);
0000de  f04f30ff          MOV      r0,#0xffffffff
                  |L1.226|
;;;242        }
;;;243    
;;;244        //
;;;245        // This packet was sent and received successfully.
;;;246        //
;;;247        return(0);
;;;248    }
0000e2  b004              ADD      sp,sp,#0x10
0000e4  bd10              POP      {r4,pc}
                  |L1.230|
0000e6  2000              MOVS     r0,#0                 ;247
0000e8  e7fb              B        |L1.226|
;;;249    
                          ENDP

0000ea  0000              DCW      0x0000
                  |L1.236|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  g_pucACK
000000  00cc              DCB      0x00,0xcc
                  g_pucNAK
000002  0033              DCB      0x00,0x33
