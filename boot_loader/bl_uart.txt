; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -obl_uart.o --depend=bl_uart.d --feedback=bootloader.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Luminary -D__MICROLIB --omf_browse=bl_uart.crf bl_uart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  UARTFlush PROC
;;;102    void
;;;103    UARTFlush(void)
000000  4812              LDR      r0,|L1.76|
                  |L1.2|
;;;104    {
;;;105        //
;;;106        // Wait for the UART FIFO to empty and then wait for the shifter to get the
;;;107        // bytes out the port.
;;;108        //
;;;109        while(!(UART0->FR & UART_FR_TXFE))
000002  6981              LDR      r1,[r0,#0x18]
000004  0609              LSLS     r1,r1,#24
000006  d5fc              BPL      |L1.2|
                  |L1.8|
;;;110        {
;;;111        }
;;;112    
;;;113        //
;;;114        // Wait for the FIFO to not be busy so that the shifter completes.
;;;115        //
;;;116        while((UART0->FR & UART_FR_BUSY))
000008  6981              LDR      r1,[r0,#0x18]
00000a  0709              LSLS     r1,r1,#28
00000c  d4fc              BMI      |L1.8|
;;;117        {
;;;118        }
;;;119    }
00000e  4770              BX       lr
;;;120    
                          ENDP

                  UARTSend PROC
;;;60     void
;;;61     UARTSend(const unsigned char *pucData, unsigned long ulSize)
000010  4a0f              LDR      r2,|L1.80|
;;;62     {
;;;63         if(Board_Id!=BOOT_EN[2])    //只有板号设定的表位回送数据
000012  4b10              LDR      r3,|L1.84|
000014  6892              LDR      r2,[r2,#8]  ; BOOT_EN
000016  781b              LDRB     r3,[r3,#0]  ; Board_Id
000018  429a              CMP      r2,r3
00001a  d10a              BNE      |L1.50|
;;;64     	 return;
;;;65     
;;;66         //
;;;67         // Transmit the number of bytes requested on the UART port.
;;;68         //
;;;69         while(ulSize--)
;;;70         {
;;;71             //
;;;72             // Make sure that the transmit FIFO is not full.
;;;73             //
;;;74             while((UART0->FR & UART_FR_TXFF))
00001c  4a0b              LDR      r2,|L1.76|
00001e  e005              B        |L1.44|
                  |L1.32|
000020  6993              LDR      r3,[r2,#0x18]
000022  069b              LSLS     r3,r3,#26
000024  d4fc              BMI      |L1.32|
;;;75             {
;;;76             }
;;;77     
;;;78             //
;;;79             // Send out the next byte.
;;;80             //
;;;81             UART0->DR = *pucData++;
000026  f8103b01          LDRB     r3,[r0],#1
00002a  6013              STR      r3,[r2,#0]
                  |L1.44|
00002c  1e49              SUBS     r1,r1,#1              ;69
00002e  d2f7              BCS      |L1.32|
;;;82         }
;;;83     
;;;84         //
;;;85         // Wait until the UART is done transmitting.
;;;86         //
;;;87         UARTFlush();
000030  e7fe              B        UARTFlush
                  |L1.50|
;;;88     }
000032  4770              BX       lr
;;;89     
                          ENDP

                  UARTReceive PROC
;;;138    void
;;;139    UARTReceive(unsigned char *pucData, unsigned long ulSize)
000034  4a05              LDR      r2,|L1.76|
;;;140    {
;;;141        //
;;;142        // Send out the number of bytes requested.
;;;143        //
;;;144        while(ulSize--)
000036  e005              B        |L1.68|
                  |L1.56|
;;;145        {
;;;146            //
;;;147            // Wait for the FIFO to not be empty.
;;;148            //
;;;149            while((UART0->FR & UART_FR_RXFE))
000038  6993              LDR      r3,[r2,#0x18]
00003a  06db              LSLS     r3,r3,#27
00003c  d4fc              BMI      |L1.56|
;;;150            {
;;;151            }
;;;152    
;;;153            //
;;;154            // Receive a byte from the UART.
;;;155            //
;;;156            *pucData++ = UART0->DR;
00003e  6813              LDR      r3,[r2,#0]
000040  f8003b01          STRB     r3,[r0],#1
                  |L1.68|
000044  1e49              SUBS     r1,r1,#1              ;144
000046  d2f7              BCS      |L1.56|
;;;157        }
;;;158    }
000048  4770              BX       lr
;;;159    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x4000c000
                  |L1.80|
                          DCD      BOOT_EN
                  |L1.84|
                          DCD      Board_Id
