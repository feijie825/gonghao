; generated by ARM C/C++ Compiler, RVCT4.0 [Build 728]
; commandline ArmCC [--debug -c --asm --interleave -olm3s21xx_ssi.o --depend=lm3s21xx_ssi.d --feedback=bootloader.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\Luminary -D__MICROLIB --omf_browse=lm3s21xx_ssi.crf LM3S21xx_ssi.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SSIEnable PROC
;;;88     *****************************************************************************/
;;;89     void SSIEnable(SSI_Typedef *SSIx)
000000  6841              LDR      r1,[r0,#4]
;;;90     {
;;;91         SSIx->CR1 |= SSI_CR1_SSE;
000002  f0410102          ORR      r1,r1,#2
000006  6041              STR      r1,[r0,#4]
;;;92     }
000008  4770              BX       lr
;;;93     /*****************************************************************************
                          ENDP

                  SSIConfigSetExpClk PROC
;;;41     *****************************************************************************/
;;;42     void SSIConfigSetExpClk(SSI_Typedef *SSIx, u32 ulSSIClk,u32 ulProtocol, u32 ulMode,
00000a  b570              PUSH     {r4-r6,lr}
;;;43                                                u32 ulBitRate, u32 ulDataWidth)
;;;44     {
00000c  e9dd6504          LDRD     r6,r5,[sp,#0x10]
;;;45         u32 ulMaxBitRate;
;;;46         u32 ulRegVal;
;;;47         u32 ulPreDiv;
;;;48         u32 ulSCR;
;;;49         u32 ulSPH_SPO;
;;;50     
;;;51         ASSERT((ulProtocol == SSI_FRF_MOTO_MODE_0) ||
;;;52                (ulProtocol == SSI_FRF_MOTO_MODE_1) ||
;;;53                (ulProtocol == SSI_FRF_MOTO_MODE_2) ||
;;;54                (ulProtocol == SSI_FRF_MOTO_MODE_3) ||
;;;55                (ulProtocol == SSI_FRF_TI) ||
;;;56                (ulProtocol == SSI_FRF_NMW));
;;;57         ASSERT((ulMode == SSI_MODE_MASTER) ||
;;;58                (ulMode == SSI_MODE_SLAVE) ||
;;;59                (ulMode == SSI_MODE_SLAVE_OD));
;;;60         ASSERT(((ulMode == SSI_MODE_MASTER) && (ulBitRate <= (ulSSIClk / 2))) ||
;;;61                ((ulMode != SSI_MODE_MASTER) && (ulBitRate <= (ulSSIClk / 12))));
;;;62         ASSERT((ulSSIClk / ulBitRate) <= (254 * 256));
;;;63         ASSERT((ulDataWidth >= 4) && (ulDataWidth <= 16));
;;;64     
;;;65         ulRegVal = (ulMode == SSI_MODE_SLAVE_OD) ? SSI_CR1_SOD : 0;
000010  2408              MOVS     r4,#8
000012  2b02              CMP      r3,#2
000014  d000              BEQ      |L1.24|
000016  2400              MOVS     r4,#0
                  |L1.24|
;;;66         ulRegVal |= (ulMode == SSI_MODE_MASTER) ? 0 : SSI_CR1_MS;
000018  b90b              CBNZ     r3,|L1.30|
00001a  2300              MOVS     r3,#0
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  2304              MOVS     r3,#4
                  |L1.32|
000020  4323              ORRS     r3,r3,r4
;;;67         SSIx->CR1 = ulRegVal;
000022  6043              STR      r3,[r0,#4]
;;;68     
;;;69         ulMaxBitRate = ulSSIClk / ulBitRate;
000024  fbb1f4f6          UDIV     r4,r1,r6
;;;70         ulPreDiv = 0;
000028  2100              MOVS     r1,#0
                  |L1.42|
;;;71         do
;;;72          {
;;;73           ulPreDiv += 2;
00002a  1c89              ADDS     r1,r1,#2
;;;74           ulSCR = (ulMaxBitRate / ulPreDiv) - 1;
00002c  fbb4f3f1          UDIV     r3,r4,r1
000030  1e5b              SUBS     r3,r3,#1
;;;75          }
;;;76         while(ulSCR > 255);
000032  2bff              CMP      r3,#0xff
000034  d8f9              BHI      |L1.42|
;;;77         SSIx->CPSR = ulPreDiv;
000036  6101              STR      r1,[r0,#0x10]
;;;78     
;;;79         ulSPH_SPO = ulProtocol << 6;
000038  0191              LSLS     r1,r2,#6
;;;80         ulProtocol &= SSI_CR0_FRF_M;
00003a  f0020230          AND      r2,r2,#0x30
;;;81         ulRegVal = (ulSCR << 8) | ulSPH_SPO | ulProtocol | ulDataWidth ;
00003e  ea412103          ORR      r1,r1,r3,LSL #8
000042  4311              ORRS     r1,r1,r2
000044  4329              ORRS     r1,r1,r5
;;;82         SSIx->CR0 = ulRegVal;
000046  6001              STR      r1,[r0,#0]
;;;83     }
000048  bd70              POP      {r4-r6,pc}
;;;84     
                          ENDP

                  Init_Ssi PROC
;;;12     *****************************************************************************/
;;;13     void Init_Ssi(void)
00004a  b51c              PUSH     {r2-r4,lr}
;;;14     {
;;;15         SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);//使能SSI0时钟	
00004c  f44f7082          MOV      r0,#0x104
000050  f7fffffe          BL       SysCtlPeripheralEnable
;;;16         SSIConfigSetExpClk(SSI0,8000000,\
000054  2307              MOVS     r3,#7
000056  f6446220          MOV      r2,#0x4e20
00005a  e9cd2300          STRD     r2,r3,[sp,#0]
00005e  4c0d              LDR      r4,|L1.148|
000060  2300              MOVS     r3,#0
000062  461a              MOV      r2,r3
000064  490a              LDR      r1,|L1.144|
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SSIConfigSetExpClk
;;;17                                 SSI_FRF_MOTO_MODE_0,\
;;;18                                 SSI_MODE_MASTER,\
;;;19                                 SSI_BITRATE,\
;;;20                                 SSI_CR0_DSS_8);    //配置SSI CR0
;;;21         SSIEnable(SSI0);                           //使能SSI0
00006c  4620              MOV      r0,r4
00006e  e8bd401c          POP      {r2-r4,lr}
000072  e7fe              B        SSIEnable
;;;22     }
;;;23     /*****************************************************************************
                          ENDP

                  SSIDataLen PROC
;;;25     *****************************************************************************/
;;;26     void SSIDataLen(SSI_Typedef *SSIx,u8 Len)
000074  68c2              LDR      r2,[r0,#0xc]
;;;27     {
;;;28         while(!(SSIx->SR & SSI_SR_TFE))
000076  07d2              LSLS     r2,r2,#31
000078  d0fc              BEQ      SSIDataLen
;;;29          { //发送缓冲区不空 等待
;;;30          }
;;;31         SSIx->CR0 = ((SSIx->CR0 & (~SSI_CR0_DSS_M)) | Len); 
00007a  6802              LDR      r2,[r0,#0]
00007c  f022020f          BIC      r2,r2,#0xf
000080  430a              ORRS     r2,r2,r1
000082  6002              STR      r2,[r0,#0]
;;;32     }
000084  4770              BX       lr
;;;33     /*****************************************************************************
                          ENDP

                  SSIDataPut PROC
;;;106    *****************************************************************************/
;;;107    void SSIDataPut(SSI_Typedef *SSIx, u32 ulData)
000086  68c2              LDR      r2,[r0,#0xc]
;;;108    {
;;;109        while(!(SSIx->SR & SSI_SR_TNF))
000088  0792              LSLS     r2,r2,#30
00008a  d5fc              BPL      SSIDataPut
;;;110         { //满 等待
;;;111         }
;;;112        SSIx->DR = ulData;
00008c  6081              STR      r1,[r0,#8]
;;;113    }
00008e  4770              BX       lr
;;;114    
                          ENDP

                  |L1.144|
                          DCD      0x007a1200
                  |L1.148|
                          DCD      0x40008000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  SSIDisable PROC
;;;88     *****************************************************************************/
;;;89     void SSIEnable(SSI_Typedef *SSIx)
000000  6841              LDR      r1,[r0,#4]
;;;90     {
;;;91         SSIx->CR1 |= SSI_CR1_SSE;
000002  f0210102          BIC      r1,r1,#2
000006  6041              STR      r1,[r0,#4]
;;;92     }
000008  4770              BX       lr
;;;93     /*****************************************************************************
                          ENDP

